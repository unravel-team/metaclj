#+title:  Tooling configuration for brand new Clojure projects
#+author: Vedang Manerikar
#+email: vedang@unravel.tech
#+language: en
#+options: ':t toc:nil num:nil author:t email:t

* Quickstart

1. Copy over the =Makefile= to your Clojure project.
2. Run =make help= to see what you can do.

[ A short thread on what using Metaclj looks like: <link> (<date>) ]

* Table of Contents :TOC:
- [[#quickstart][Quickstart]]
- [[#introduction][Introduction]]
- [[#the-phony-section-of-the-makefile][The PHONY section of the Makefile]]
- [[#the-common-variables-section-of-the-makefile][The common variables section of the Makefile]]
- [[#set-bash-as-the-shell-for-executing-commands][Set Bash as the shell for executing commands]]
- [[#the-default-goal-section-of-the-makefile][The default goal section of the Makefile]]
- [[#the-help-target-to-explain-what-you-can-do-with-the-makefile][The help target to explain what you can do with the Makefile]]
- [[#the-install-section-for-one-time-install-of-config-files][The Install section for one-time install of config files]]
  - [[#the-clj-kondo-section-of-the-makefile][The clj-kondo section of the Makefile]]
  - [[#the-zprint-section-of-the-makefile][The zprint section of the Makefile]]
  - [[#the-gitignore-section-of-the-makefile][The .gitignore section of the Makefile]]
  - [[#the-conventions-section-of-the-makefile][The CONVENTIONS section of the Makefile]]
  - [[#the-aider-section-of-the-makefile][The Aider section of the Makefile]]
- [[#the-main-opts-and-repl-targets-for-the-clojure-cli-tool][The Main Opts and REPL targets for the Clojure CLI tool]]
- [[#the-enrich-section-of-the-makefile][The Enrich section of the Makefile]]
- [[#the-cicd-section-of-the-makefile][The CI/CD section of the Makefile]]
  - [[#the-section-to-check-that-the-code-is-good][The section to check that the code is good]]
  - [[#the-section-to-test-that-the-code-is-working-correctly][The section to test that the code is working correctly]]
- [[#the-section-to-upgrade-clojure-libraries-in-the-current-project][The section to upgrade Clojure libraries in the current project]]
- [[#the-section-to-build-the-clojure-project][The section to build the Clojure project]]
- [[#the-section-to-deploy-the-clojure-project-to-production][The section to deploy the Clojure project to production]]
- [[#the-section-to-clean-existing-artifacts-from-the-clojure-project][The section to clean existing artifacts from the Clojure project]]

* Introduction
:PROPERTIES:
:CUSTOM_ID: h:CDD118FE-59DE-4B59-B919-22DF82087BA1
:CREATED:  [2024-12-28 Sat 11:25]
:END:

Whenever I start a new Clojure project, I run through a series of
steps to standardize the project's developer experience. This project
is an attempt to short-circuit that, and also to note all the steps
down for my own reference in the future.

To make a change to Metaclj's Makefile, edit this file and then
type =C-c C-v C-t= (=M-x org-babel-tangle=) to publish the changes.

* The PHONY section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:207937CB-7D6B-4EA3-AF7A-BE36057F8D89
:CREATED:  [2024-12-28 Sat 11:30]
:END:

A target in a Makefile is meant to be an actual file that the
"execution" of the target creates. Sometimes, we want "actions" as
target -- think =make check= or =make build=, we do not expect a file
called ~check~ or a file called ~build~ to be created. We call these
targets as phony targets, and informing ~make~ helps it avoid checking
for the existence of these files.

Our PHONY targets are as follows:

1. *Installing tools* (You only need to do this once)
   - =install-antq= (See: [[#h:9105B76A-A27A-4A63-A2D2-D311CDC9C23E][The section to upgrade Clojure libraries in the current project]])
   - =install-kondo-configs= (Installing linting configuration. See: [[#h:557E00DD-D217-468E-9F20-FE4FE4C049BE][The clj-kondo section of the Makefile]])
   - =install-zprint-config= (Installing formatting configuration. See: [[#h:24CF27D2-DAD9-4A3C-B80E-63DF15591FFD][The zprint section of the Makefile]])
   - =install-gitignore= (Installing a good gitignore file. See: [[#h:DDEC523F-F4A5-4506-A1DA-3290336D6527][The .gitignore section of the Makefile]])
2. *Running our Clojure project*
   - =repl= (Starting the Clojure REPL. See: [[#h:16E6BE64-E940-45CD-AEE7-82D197E6B2DA][The Main Opts and REPL targets for the Clojure CLI tool]])
   - =repl-enrich= (See: [[#h:944B86CB-099C-47F9-9F91-DB446EF68012][The Enrich section of the Makefile]])
3. *Testing our Clojure project*
   - =check= (Checking for code-standards in CI/CD. See: [[#h:7AF49050-665C-4BF6-BC19-97B553F7D0B4][The section to check that the code is good]])
   - =test= (Running Polylith tests. See: [[#h:CD7913EA-0DCC-4388-BDF5-9DA5AB0C3531][The section to test that the code is working correctly]])
   - =test-coverage= (Running Clofidence)
4. *Upgrading libraries and tooling*
   - =upgrade-libs= (Upgrading all the dependencies. See: [[#h:9105B76A-A27A-4A63-A2D2-D311CDC9C23E][The section to upgrade Clojure libraries in the current project]])
   - =install-kondo-configs= (See: [[#h:557E00DD-D217-468E-9F20-FE4FE4C049BE][The clj-kondo section of the Makefile]])
5. *Deploying our Clojure project to Production*
   - =build= (See: <Creating Artifacts section>)
   - =serve= (See: <Running Artifacts section>)
   - =deploy= (See: <Deploying Artifacts section>)
6. *Deleting artifacts and going back to default state*
   - =clean= (See: <Cleaning Artifacts section>)

PHONY targets are declared right above the target itself, for easy maintainability and readability

* The common variables section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:B3833E1E-F328-4DDB-B5CD-31086232DEE2
:CREATED:  [2024-12-28 Sat 11:53]
:END:

These are variables we use in some of the other =Makefile= targets.
You can ignore them for now and we'll review them when we use them.

#+begin_src makefile-bsdmake :tangle "Makefile"
  HOME := $(shell echo $$HOME)
  HERE := $(shell echo $$PWD)
  CLOJURE_SOURCES := $(shell find . -name '**.clj' -not -path './.clj-kondo/*' -not -path './target/*' -not -path './projects/*/target/*')
#+end_src

* Set Bash as the shell for executing commands
:PROPERTIES:
:CUSTOM_ID: h:06956487-A480-43D1-94EC-B9148CE6F2D6
:CREATED:  [2024-12-28 Sat 12:04]
:END:

#+begin_src makefile-bsdmake :tangle "Makefile"
  # Set bash instead of sh for the @if [[ conditions,
  # and use the usual safety flags:
  SHELL = /bin/bash -Eeu
#+end_src

* The default goal section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:FA6CC44F-CA8C-4E8B-8613-233C00F5F7EA
:CREATED:  [2024-12-28 Sat 11:55]
:END:

The =.DEFAULT_GOAL= is what runs when we only run the ~make~ command
with no directive. In our case, we want this to print the help options
and exit, so that the user has a clear idea of what is possible with
this Makefile.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .DEFAULT_GOAL := help
#+end_src

* The help target to explain what you can do with the Makefile
:PROPERTIES:
:CUSTOM_ID: h:F4650D06-3125-4FC6-A426-A4B257C86B25
:CREATED:  [2025-01-30 Thu 14:19]
:END:

Here, we use ~awk~ to filter out all the targets which have a
doc-string. This is the "public API" of the Makefile, so to speak.

=/^[a-zA-Z0-9_-]+:.*##/= is a pattern that matches lines starting with
a target name (letters, numbers, underscores, or hyphens) followed by
a colon, followed by ~##~ somewhere in the line. This finds Makefile
target definitions.

In the print command:
- =%-25s= formats the target name left-aligned in 25 characters
- =substr($$1, 1, length($$1)-1)= takes the target name (first field)
  without the trailing colon
- =substr($$0, index($$0,"##")+3)= extracts everything after ## (the
  comment)

#+begin_src makefile-bsdmake :tangle "Makefile"
  help:    ## A brief explanation of everything you can do
  	@awk '/^[a-zA-Z0-9_-]+:.*##/ { \
  		printf "%-25s # %s\n", \
  		substr($$1, 1, length($$1)-1), \
  		substr($$0, index($$0,"##")+3) \
  	}' $(MAKEFILE_LIST)
#+end_src

* The Install section for one-time install of config files
:PROPERTIES:
:CUSTOM_ID: h:1438EEBB-FA57-476C-A06E-D4A61EDF2C17
:CREATED:  [2025-04-20 Sun 19:40]
:END:

In this section, we install all the configuration needed to run the
various commands of this Makefile. This is a one-time activity (you
can run the target as many times as you want, it will only install
config once)

#+begin_src makefile-bsdmake :tangle "Makefile"
  install: install-kondo-configs install-zprint-config install-gitignore CONVENTIONS.md .aider.conf.yml    ## Install all the configuration we need for other targets
#+end_src

** The clj-kondo section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:557E00DD-D217-468E-9F20-FE4FE4C049BE
:CREATED:  [2025-01-03 Fri 21:13]
:END:

~clj-kondo~ is the goto linter tool of the Clojure community. Run
=make install-kondo-configs= regularly to ensure that the latest
~clj-kondo~ configuration is downloaded for all the libraries you use
in the project. Having this configuration makes the programming
experience significantly richer as it teaches ~clj-kondo~ about the
custom code introduced by your dependencies.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .clj-kondo:
  	mkdir .clj-kondo

  .PHONY: install-kondo-configs
  install-kondo-configs: .clj-kondo
  	clj-kondo --lint "$$(clojure -A:dev:test:cider:build -Spath)" --copy-configs --skip-lint
#+end_src

** The zprint section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:24CF27D2-DAD9-4A3C-B80E-63DF15591FFD
:CREATED:  [2025-01-03 Fri 21:18]
:END:

~zprint~ is my favorite formatting tool from the Clojure world. I
install it using ~bbin~ (<described here>) and use it in all my
projects for automatically formatting the code as I write it. I never
think about indentation anymore, I just let ~zprint~ do it's magic.

~zprint~ is extremely aggressive, which is why I do not use it the
default formatting tool. If I did, every time I edit code in an
external library that I do not own, I'd trigger massive indentation
changes in the library. But I definitely add it to every project I
write / maintain myself.

Run =make install-zprint-config= to add the relevant configuration to
the project.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: check-zprint-config
  check-zprint-config:
  	@echo "Checking (HOME)/.zprint.edn..."
  	@if [ ! -f "$(HOME)/.zprint.edn" ]; then \
  		echo "Error: ~/.zprint.edn not found"; \
  		echo "Please create ~/.zprint.edn with the content: {:search-config? true}"; \
  		exit 1; \
  	fi
  	@if ! grep -q "search-config?" "$(HOME)/.zprint.edn"; then \
  		echo "Warning: ~/.zprint.edn might not contain required {:search-config? true} setting"; \
  		echo "Please ensure this setting is present for proper functionality"; \
  		exit 1; \
  	fi

  .zprint.edn:
  	@echo "Creating .zprint.edn..."
  	@echo '{:fn-map {"with-context" "with-meta"}, :map {:indent 0}}' > $@

  .dir-locals.el:
  	@echo "Creating .dir-locals.el..."
  	@echo ';;; Directory Local Variables         -*- no-byte-compile: t; -*-' > $@
  	@echo ';;; For more information see (info "(emacs) Directory Variables")' >> $@
  	@echo '((clojure-dart-ts-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojure-jank-ts-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojure-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojure-ts-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojurec-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojurec-ts-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojurescript-mode . ((apheleia-formatter . (zprint))))' >> $@
  	@echo ' (clojurescript-ts-mode . ((apheleia-formatter . (zprint)))))' >> $@

  .PHONY: install-zprint-config
  install-zprint-config: check-zprint-config .zprint.edn .dir-locals.el
  	@echo "zprint configuration files created successfully."
#+end_src

** The .gitignore section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:DDEC523F-F4A5-4506-A1DA-3290336D6527
:CREATED:  [2025-01-03 Fri 21:22]
:END:

It's good to have a default .gitignore file that *just works*. That's
what =make install-gitignore= does.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .gitignore:
  	@echo "Creating a .gitignore file"
  	@echo '# Artifacts' > $@
  	@echo '**/classes' >> $@
  	@echo '**/target' >> $@
  	@echo '**/.artifacts' >> $@
  	@echo '**/.cpcache' >> $@
  	@echo '**/.DS_Store' >> $@
  	@echo '**/.gradle' >> $@
  	@echo 'logs/' >> $@
  	@echo '' >> $@
  	@echo '# 12-factor App Configuration' >> $@
  	@echo '.envrc' >> $@
  	@echo '' >> $@
  	@echo '# User-specific stuff' >> $@
  	@echo '.idea/**/workspace.xml' >> $@
  	@echo '.idea/**/tasks.xml' >> $@
  	@echo '.idea/**/usage.statistics.xml' >> $@
  	@echo '.idea/**/shelf' >> $@
  	@echo '.idea/**/statistic.xml' >> $@
  	@echo '.idea/dictionaries/**' >> $@
  	@echo '.idea/libraries/**' >> $@
  	@echo '' >> $@
  	@echo '# File-based project format' >> $@
  	@echo '*.iws' >> $@
  	@echo '*.ipr' >> $@
  	@echo '' >> $@
  	@echo '# Cursive Clojure plugin' >> $@
  	@echo '.idea/replstate.xml' >> $@
  	@echo '*.iml' >> $@
  	@echo '' >> $@
  	@echo '/example/example/**' >> $@
  	@echo 'artifacts' >> $@
  	@echo 'projects/**/pom.xml' >> $@
  	@echo '' >> $@
  	@echo '# nrepl' >> $@
  	@echo '.nrepl-port' >> $@
  	@echo '' >> $@
  	@echo '# clojure-lsp' >> $@
  	@echo '.lsp/.cache' >> $@
  	@echo '' >> $@
  	@echo '# clj-kondo' >> $@
  	@echo '.clj-kondo/.cache' >> $@
  	@echo '' >> $@
  	@echo '# Calva VS Code Extension' >> $@
  	@echo '.calva/output-window/output.calva-repl' >> $@
  	@echo '' >> $@
  	@echo '# Metaclj tempfiles' >> $@
  	@echo '.antqtool.lastupdated' >> $@
  	@echo '.enrich-classpath-repl' >> $@

  .PHONY: install-gitignore
  install-gitignore: .gitignore
  	@echo ".gitignore added/exists in the project"
#+end_src

** The CONVENTIONS section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:72304956-2E82-4888-9709-8E69AA6D2A56
:CREATED:  [2025-04-20 Sun 18:52]
:END:
Coding Conventions are, in general, a great idea. They set
expectations correctly for the programmer new to your project. With
the advent of the LLM pair programmer, they also become excellent
guidelines for your AI assistant, as we'll see in the section on
Aider.

I've added my CONVENTIONS.md file to this repo, and the ~make~ task
simply checks for the presence of such a file. If it does not find it,
it will print instructions for your to copy it from the ~metaclj~
project.

#+begin_src makefile-bsdmake :tangle "Makefile"
  CONVENTIONS.md:
  	@echo "Download the CONVENTIONS.md file from the [[https://github.com/unravel-team/metaclj][metaclj]] project"
#+end_src

** The Aider section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:F9F04893-395F-4E15-A5FA-BE955ADB0A00
:CREATED:  [2025-04-20 Sun 20:12]
:END:

Aider is absolutely amazing, and it is my goto tool for programming
with an LLM. My configuration with Aider is in the ~.aider.conf.yml~
file, and the Makefile target reminds you to install it by copying it
from ~metaclj~.

I've written more about how I use Aider here: <link>

#+begin_src makefile-bsdmake :tangle "Makefile"
  .aider.conf.yml:
  	@echo "Download the .aider.conf.yml file from the [[https://github.com/unravel-team/metaclj][metaclj]] project"
#+end_src

* The Main Opts and REPL targets for the Clojure CLI tool
:PROPERTIES:
:CUSTOM_ID: h:16E6BE64-E940-45CD-AEE7-82D197E6B2DA
:CREATED:  [2024-12-28 Sat 12:07]
:END:

Here we define the aliases that we select when we run =make repl=, and
the ~repl~ target.

If you wish to override these aliases, you can do so by defining an
environment variable called =DEPS_MAIN_OPTS= (for example, in the
=.envrc= file, See: <12-factor App Configuration section>)

To understand what these aliases do and how to install them in your
own project, see: <Clojure CLI Aliases section>.

#+begin_src makefile-bsdmake :tangle "Makefile"
  # The Clojure CLI aliases that will be selected for main options for `repl`.
  # Feel free to upgrade this, or to override it with an env var named DEPS_MAIN_OPTS.
  # Expected format: "-M:alias1:alias2"
  DEPS_MAIN_OPTS ?= "-M:dev:test:logs-dev:cider-storm"

  .PHONY: repl
  repl:    ## Launch a REPL using the Clojure CLI
  	clojure $(DEPS_MAIN_OPTS);
#+end_src

* The Enrich section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:944B86CB-099C-47F9-9F91-DB446EF68012
:CREATED:  [2024-12-28 Sat 16:40]
:END:

=mx.cider/enrich-classpath= is a tool to download and add Java sources
for your Clojure projects. With this tool, you can =M-.= into Java
sources too, which is an incredibly powerful tool when you want to
inspect the source-code of the functions and libraries you are using.

This section of the =Makefile= is taken from the Enrich documentation
itself. The only drawback here is that I have to manually bump the
Enrich version periodically.

#+begin_src makefile-bsdmake :tangle "Makefile"
  # The enrich-classpath version to be injected.
  # Feel free to upgrade this.
  ENRICH_CLASSPATH_VERSION="1.19.3"

  # Create and cache a `clojure` command. deps.edn is mandatory; the others are optional but are taken into account for cache recomputation.
  # It's important not to silence with step with @ syntax, so that Enrich progress can be seen as it resolves dependencies.
  .enrich-classpath-repl: Makefile deps.edn $(wildcard $(HOME)/.clojure/deps.edn) $(wildcard $(XDG_CONFIG_HOME)/.clojure/deps.edn)
  	cd $$(mktemp -d -t enrich-classpath.XXXXXX); clojure -Sforce -Srepro -J-XX:-OmitStackTraceInFastThrow -J-Dclojure.main.report=stderr -Sdeps '{:deps {mx.cider/tools.deps.enrich-classpath {:mvn/version $(ENRICH_CLASSPATH_VERSION)}}}' -M -m cider.enrich-classpath.clojure "clojure" "$(HERE)" "true" $(DEPS_MAIN_OPTS) | grep "^clojure" > $(HERE)/$@

  # Launches a repl, falling back to vanilla Clojure repl if something went wrong during classpath calculation.
  .PHONY: repl-enrich
  repl-enrich: .enrich-classpath-repl    ## Launch a repl enriched with Java source code paths
  	@if grep --silent "^clojure" .enrich-classpath-repl; then \
  		echo "Executing: $$(cat .enrich-classpath-repl)" && \
  		eval $$(cat .enrich-classpath-repl); \
  	else \
  		echo "Falling back to Clojure repl... (you can avoid further falling back by removing .enrich-classpath-repl)"; \
  		clojure $(DEPS_MAIN_OPTS); \
  	fi
#+end_src



* The CI/CD section of the Makefile
:PROPERTIES:
:CUSTOM_ID: h:B423079B-E66C-4DEE-AC9E-8ED12225EB43
:CREATED:  [2025-01-03 Fri 21:27]
:END:

As part of CI/CD, I want automated linter-formatter checks, tests to
run and builds to happen. Here we create Makefile targets to help us
with this.

** The section to check that the code is good
:PROPERTIES:
:CUSTOM_ID: h:7AF49050-665C-4BF6-BC19-97B553F7D0B4
:CREATED:  [2025-01-03 Fri 22:17]
:END:

This section runs three checks:
- Tagref (See: <section explaining tagref>)
- Clj-Kondo (See: [[#h:557E00DD-D217-468E-9F20-FE4FE4C049BE][The clj-kondo section of the Makefile]])
- Zprint (See: [[#h:24CF27D2-DAD9-4A3C-B80E-63DF15591FFD][The zprint section of the Makefile]])

Run the command =make check= to see if your code is compliant. Run the
command =make format= to format all your Clojure source files using
~zprint~.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: check-tagref
  check-tagref:
  	tagref

  .PHONY: check-cljkondo
  check-cljkondo:
  	clj-kondo --lint $(CLOJURE_SOURCES)

  .PHONY: check-zprint
  check-zprint:
  	zprint -c $(CLOJURE_SOURCES)

  .PHONY: check
  check: check-tagref check-cljkondo check-zprint    ## Check that the code is well linted
  	@echo "All checks passed!"

  .PHONY: format
  format:       ## Format the code to conform with our standards
  	zprint -lfw $(CLOJURE_SOURCES)
#+end_src

** The section to test that the code is working correctly
:PROPERTIES:
:CUSTOM_ID: h:CD7913EA-0DCC-4388-BDF5-9DA5AB0C3531
:CREATED:  [2025-01-03 Fri 21:31]
:END:

I use ~polylith~ and ~deps-new~ as my goto Clojure frameworks. The
testing targets in my Makefile reflect the frameworks I use. Please
add more frameworks, I welcome PRs to improve this section.

The target ~test-coverage~ uses Clofidence for coverage tracking (See:
<clofidence installation instructions>)

Run the command =make test=

#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: test-all
  test-all:
  	clojure -M:poly test :all

  .PHONY: test-converage
  test-coverage:  ## Run coverage reports for the code using Clofidence
  	clojure -X:dev:test:clofidence

  .PHONY: test-poly
  test-poly:    ## Run Poly tests for the code
  	clojure -M:poly test

  .PHONY: test
  test:    ## Run all the tests for the code
  	clojure -T:build test
#+end_src

* The section to upgrade Clojure libraries in the current project
:PROPERTIES:
:CUSTOM_ID: h:9105B76A-A27A-4A63-A2D2-D311CDC9C23E
:CREATED:  [2025-01-03 Fri 21:35]
:END:

I use ~antq~ for managing dependencies. This target installs and runs
antq, which upgrades all the libraries in the current project.

Run the command =make upgrade-libs=
#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: install-antq
  install-antq:
  	@if [ -f .antqtool.lastupdated ] && find .antqtool.lastupdated -mtime +15 -print | grep -q .; then \
  		echo "Updating antq tool to the latest version..."; \
  		clojure -Ttools install-latest :lib com.github.liquidz/antq :as antq; \
  		touch .antqtool.lastupdated; \
  	else \
  		echo "Skipping antq tool update..."; \
  	fi

  .antqtool.lastupdated:
  	touch .antqtool.lastupdated

  .PHONY: upgrade-libs
  upgrade-libs: .antqtool.lastupdated install-antq    ## Install all the deps to their latest versions
  	clojure -Tantq outdated :check-clojure-tools true :upgrade true
#+end_src

* The section to build the Clojure project
:PROPERTIES:
:CUSTOM_ID: h:9EF38A44-B1D5-4357-9DEA-A4BD91202FE5
:CREATED:  [2025-01-03 Fri 21:40]
:END:

The ~build~ target builds the jar artifact, and the ~localinstall~ target installs it in the local ~m2~ repository for immediate use.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: build
  build: check    ## Build the deployment artifact
  	@echo "Run deps-new build commands here!"
  	clojure -T:build install

  .PHONY: localinstall
  localinstall: build   ## Install the artifact locally
  	clojure -T:build install
#+end_src

* The section to deploy the Clojure project to production
:PROPERTIES:
:CUSTOM_ID: h:B12DAE81-0591-4E36-B8BA-A73B293FB783
:CREATED:  [2025-01-03 Fri 21:38]
:END:

The ~deploy~ target deploys to production, and the ~deploy-lib~ target deploys to your chosen repository.

#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: deploy
  deploy: build    ## Deploy the current code to production
  	@echo "Run fly.io deployment commands here!"

  .PHONY: deploy-lib
  deploy-lib: build  ## Deploy to Clojars. needs `CLOJARS_USERNAME` and `CLOJARS_PASSWORD` env vars
  	clojure -T:build deploy
#+end_src

* The section to clean existing artifacts from the Clojure project
:PROPERTIES:
:CUSTOM_ID: h:287495BE-C413-48D2-86CC-9741B7E3E7E0
:CREATED:  [2025-01-03 Fri 21:39]
:END:

<TBD>
#+begin_src makefile-bsdmake :tangle "Makefile"
  .PHONY: clean-projects
  clean-projects:
  	rm -rf projects/*/target/public

  .PHONY: clean
  clean: clean-projects    ## Delete any existing artifacts
  	rm -rf target/
#+end_src

* COMMENT Local Variables

We use ~toc-org-mode~ in this file, to generate titles which are
compliant with GitHub. Here, we enable ~toc-org-mode~ for this file
specifically, so that others who open the file in Emacs Org-mode can
navigate the TOC properly.

# Local Variables:
# eval: (toc-org-mode 1)
# End:
